from urllib.request import urlretrieve
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery
from aiogram.types.successful_payment import SuccessfulPayment
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

import requests
import time
import os
import urllib

from config import config
from markups.add_section import *
from models.user import User
from models.city import City
from models.category import Category
from models.section import Section, SectionPhoto
from models.metro import Metro
from models.district import District
from states.add_section import AddSection
from utils.db_connection import create_db_session
from utils.get_district_and_metro import get_data

from pprint import pprint

from email_validator import validate_email, EmailNotValidError


async def change_context_add_section(message: Message):
    await AddSection.City.set()
    kb = await get_cities_kb(offset=0)
    chat_id = message["from"]["id"]
    await message.bot.send_message(
        text="""
        –ì–æ—Ä–æ–¥ üè¢
        ---
        –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞‚§µÔ∏è
        ---
        –ï—Å–ª–∏ –≤–∞—à –≥–æ—Ä–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ
        –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç.
    """,
        chat_id=chat_id,
        reply_markup=kb,
    )


async def save_city_value(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["city"] = call.data.split("_")[1]

    await AddSection.next()

    category_kb = await get_categories_kb(offset=0)
    chat_id = call["from"]["id"]
    await call.bot.send_message(
        text="""
        –í –∫–∞–∫—É—é –ö–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏—Ç—å
        –≤–∞—à–µ –º–µ—Å—Ç–æ?
        ---
        –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ
        –∫–∞—Ç–µ–≥–æ—Ä–∏–∏‚§µÔ∏è
    """,
        chat_id=chat_id,
        reply_markup=category_kb,
    )


async def save_category_value(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["category"] = call.data.split("_")[1]

    chat_id = call["from"]["id"]
    await call.bot.send_message(
        text="""
        –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞üèãÔ∏è
        ---
        –ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç‚§µÔ∏è
    """,
        chat_id=chat_id,
    )

    await AddSection.next()


async def save_section_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message["text"]
        data["urls"] = []

    chat_id = message["from"]["id"]
    await message.bot.send_message(
        text="""
        –ê–¥—Ä–µ—Å —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞üìç
        (–ø—Ä–∏–º–µ—Ä:—É–ª. –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ,–¥.16)
        ---
        –ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç‚§µÔ∏è
    """,
        chat_id=chat_id,
    )

    await AddSection.next()


async def save_section_address(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data["address"] = message["text"]

        chat_id = message["from"]["id"]
        await message.bot.send_message(text="Wait a minute...", chat_id=chat_id)

        data["district"], data["geoposition"], data["metro"] = get_data(data['city'] + ' ' + data["address"])
        session_maker = await create_db_session()
        try:
            metro = await Metro.create(
                session_maker=session_maker, name=data["metro"], city=data["city"]
            )
        except Exception as e:
            print(e)

        try:
            await District.create(
                session_maker=session_maker, name=data["district"], city=data["city"]
            )
        except Exception as e:
            print(e)
        category = await Category.get_category(
            session_maker=session_maker, name=data["category"]
        )
        data["category_id"] = category[0].id

    time.sleep(3)
    async with state.proxy() as data:
        await message.bot.send_message(
            text=f"""
            üî•–°—É–ø–µ—Ä!
            –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∞–¥—Ä–µ—Å
            {data['address']}

            üìç –†–∞–π–æ–Ω
            {data['district']}            

            üöá–ú–µ—Ç—Ä–æ
            {data['metro']}

        """,
            chat_id=chat_id,
            reply_markup=confirm_kb,
        )


async def pre_save_images(call: CallbackQuery, state: FSMContext):
    await AddSection.next()
    chat_id = call["from"]["id"]
    await call.bot.send_message(
        text="""
        –î–æ–±–∞–≤–∏–º —Ñ–æ—Ç–æ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±—É
        ---
        –ù–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏
        –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!

        ‚ùóÔ∏è –í–∞–∂–Ω–æ! –î–æ–∂–¥–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö
        —Ñ–æ—Ç–æ.
        ‚ùóÔ∏è –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—à—å –≤—Å–µ —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ"‚§µÔ∏è
    """,
        chat_id=chat_id,
        reply_markup=send_photos_kb,
    )


async def save_images(call: CallbackQuery, state: FSMContext):
    photo = call.photo.pop()
    urls = await photo.get_url()
    async with state.proxy() as data:
        data["urls"].append(urls)
    await photo.download(f'photos/{photo["file_unique_id"]}')


async def write_trainings(call: CallbackQuery, state: FSMContext):
    await AddSection.next()
    chat_id = call["from"]["id"]
    await call.bot.send_message(
        text="""
        –í–∏–¥—ã –∑–∞–Ω—è—Ç–∏–π
        ---
        –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π
        —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∏–¥—ã –∑–∞–Ω—è—Ç–∏–π,
        –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–µ‚§µÔ∏è

        –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ,
        –æ—Ç –π–æ–≥–∏ –∏ —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥–∞ –¥–æ –±–æ–∫—Å–∞
        –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.üèãÔ∏è

        –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º
        –∑–∞–Ω—è—Ç–∏–π –º–æ–∂–Ω–æ –ø–æ üîó
        https://mestosporta.io/list
    """,
        chat_id=chat_id,
        reply_markup=write_trainings_kb,
    )


async def save_trainings(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data["tranings"] = message["text"].replace(" ", "").split(",")

    time.sleep(1)
    await message.bot.send_message(
        text="""
        –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã ‚úâÔ∏è

        –ù–∞ –Ω–µ–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞—è–≤–∫–∏
        –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤üî•
    """,
        chat_id=message["from"]["id"],
    )
    await AddSection.next()


async def write_email(message: Message, state: FSMContext):
    await AddSection.next()
    async with state.proxy() as data:
        try:
            validate_email(message["text"])
            data["email"] = message["text"]
            time.sleep(1)
            await message.bot.send_message(
                text="–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–∂–∏–¥–∞–π—Ç–µ", chat_id=message["from"]["id"]
            )

            tranings = ""
            for traning in data["tranings"]:
                tranings += f"{traning} \n"

            if data["urls"] != []:
                photo = requests.get(data["urls"][0])
                await message.bot.send_photo(
                    photo=photo.content,
                    caption=f"""
                    –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥‚òëÔ∏è
                    –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

                    –ù–∞–∑–≤–∞–Ω–∏–µ:{data['name']}

                    –ì–æ—Ä–æ–¥:{data['city']}
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è:{data['category']}
                    –ê–¥—Ä–µ—Å:{data['address']}
                    –†–∞–π–æ–Ω:{data['district']}
                    –ú–µ—Ç—Ä–æ:{data['metro']}

                    –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:
                    {data['email']}

                    –í–∏–¥—ã –∑–∞–Ω—è—Ç–∏–π:
                    {tranings}

                """,
                    chat_id=message["from"]["id"],
                    reply_markup=confirm_anket_kb,
                )

            else:
                await message.bot.send_message(
                    text=f"""
                    –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥‚òëÔ∏è
                    –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

                    –ù–∞–∑–≤–∞–Ω–∏–µ:{data['name']}

                    –ì–æ—Ä–æ–¥:{data['city']}
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è:{data['category']}
                    –ê–¥—Ä–µ—Å:{data['address']}
                    –†–∞–π–æ–Ω:{data['district']}
                    –ú–µ—Ç—Ä–æ:{data['metro']}

                    –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:
                    {data['email']}

                    –í–∏–¥—ã –∑–∞–Ω—è—Ç–∏–π:
                    {tranings}

                """,
                    chat_id=message["from"]["id"],
                    reply_markup=confirm_anket_kb,
                )

        except EmailNotValidError as e:
            await message.bot.send_message(
                text="""
                –≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ—á—Ç—É!
                –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.
            """,
                chat_id=message["from"]["id"],
            )


async def save_data(call: CallbackQuery, state: FSMContext):
    await call.bot.send_message(text="–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ ‚ôªÔ∏è", chat_id=call["from"]["id"])

    async with state.proxy() as data:
        session_maker = await create_db_session()

        user = await User.get_user(
            session_maker=session_maker, telegram_id=call["from"]["id"]
        )
        tranings = ""
        if type(data["tranings"]) == list:
            for traning in data["tranings"]:
                tranings += traning + ", "
        metro = await Metro.get_metro(session_maker=session_maker, name=data["metro"])

        district = await District.get_district(
            session_maker=session_maker, name=data["district"]
        )
        section = await Section.add(
            session_maker=session_maker,
            title=data["name"],
            address=data["address"],
            category_id=data["category_id"],
            geoposition=data["geoposition"],
            metro_id=metro[0].id,
            district_id=district[0].id,
            city=data["city"],
            email=data["email"],
            user_id=user.telegram_id,
            tranings=tranings,
        )
        for photo_url in data['urls']:
            await SectionPhoto.add(session_maker=session_maker,
            file_path=photo_url,
            section_id=section.id)

    time.sleep(1)
    await call.bot.send_message(
        text="""
        –í–∞—à–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
        ---
        –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ
        –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
        ‚ùóÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü 299‚ÇΩ.‚§µÔ∏è
    """,
        chat_id=call["from"]["id"],
        reply_markup=success_anket_kb,
    )


async def subscribe(call: CallbackQuery, state: FSMContext):
    await AddSection.next()

    await call.bot.send_invoice(
        chat_id=call["from"]["id"],
        title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",
        payload="month_sub",
        provider_token=config["YOOTOKEN"],
        currency="RUB",
        start_parameter="test_bot",
        prices=[{"label": "–†—É–±", "amount": 29900}],
    )

    await call.bot.send_message(
        chat_id=call["from"]["id"],
        text="""
    –û—Ç–ª–∏—á–Ω–æüèÜ
    –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ—Å—Ç–æ.
    ---
    –í–∞—à–∏ –º–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /list
    """,
    )


async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.bot.answer_pre_checkout_query(
        pre_checkout_query.id, ok=True
    )


async def process_pay(message: Message):
    session_maker = await create_db_session()
    if message.successful_payment.invoice_payload == "month_sub":
        user = await User.get_user(message["from"]["id"])
        await user.set_subscription(session_maker)


async def not_subscribe(call: CallbackQuery, state: FSMContext):
    await call.bot.send_message(
        chat_id=call["from"]["id"],
        text="‚ùóÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç 99‚ÇΩ",
    )

    await call.bot.send_message(
        chat_id=call["from"]["id"],
        text="""
    –û—Ç–ª–∏—á–Ω–æüèÜ
    –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ—Å—Ç–æ.
    ---
    –í–∞—à–∏ –º–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /list
    """,
    )

def register_add_section_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(change_context_add_section, text=["add_place"])
    dp.register_callback_query_handler(
        save_city_value, Text(startswith="city_"), state=AddSection.City
    )
    dp.register_callback_query_handler(
        save_category_value, Text(startswith="category_"), state=AddSection
    )
    dp.register_message_handler(
        save_section_name, Text(startswith=""), state=AddSection.Name
    )
    dp.register_message_handler(
        save_section_address, Text(startswith=""), state=AddSection.Address
    )
    dp.register_callback_query_handler(
        pre_save_images, text=["confirm_section"], state=AddSection.Address
    )
    dp.register_message_handler(
        save_images, content_types=["photo"], state=AddSection.Photos
    )
    dp.register_callback_query_handler(
        write_trainings, text=["write_trainings"], state=AddSection.Photos
    )
    dp.register_message_handler(
        save_trainings, Text(startswith=""), state=AddSection.Trainings
    )
    dp.register_message_handler(
        write_email, Text(startswith=""), state=AddSection.Email
    )
    dp.register_callback_query_handler(save_data, text=["save_data"], state='*')
    dp.register_callback_query_handler(subscribe, text=["subscribe"], state='*')
    dp.pre_checkout_query_handler(process_pre_checkout_query)
    dp.register_message_handler(process_pay, content_types=[SuccessfulPayment])
    dp.register_callback_query_handler(
        not_subscribe, text=["not_subscribe"], state='*'
    )

# def register_add_section_handlers(dp: Dispatcher):
#     dp.register_callback_query_handler(change_context_add_section, text=["add_place"])
#     dp.register_callback_query_handler(
#         save_city_value, Text(startswith="city_"), state=AddSection.City
#     )
#     dp.register_callback_query_handler(
#         save_category_value, Text(startswith="category_"), state=AddSection.Category
#     )
#     dp.register_message_handler(
#         save_section_name, Text(startswith=""), state=AddSection.Name
#     )
#     dp.register_message_handler(
#         save_section_address, Text(startswith=""), state=AddSection.Address
#     )
#     dp.register_callback_query_handler(
#         pre_save_images, text=["confirm_section"], state=AddSection.Address
#     )
#     dp.register_message_handler(
#         save_images, content_types=["photo"], state=AddSection.Photos
#     )
#     dp.register_callback_query_handler(
#         write_trainings, text=["write_trainings"], state=AddSection.Photos
#     )
#     dp.register_message_handler(
#         save_trainings, Text(startswith=""), state=AddSection.Trainings
#     )
#     dp.register_message_handler(
#         write_email, Text(startswith=""), state=AddSection.Email
#     )
#     dp.register_callback_query_handler(save_data, text=["save_data"])
#     dp.register_callback_query_handler(subscribe, text=["subscribe"], state=AddSection)
#     dp.pre_checkout_query_handler(process_pre_checkout_query)
#     dp.register_message_handler(process_pay, content_types=[SuccessfulPayment])
#     dp.register_callback_query_handler(
#         not_subscribe, text=["not_subscribe"], state=AddSection
#     )
