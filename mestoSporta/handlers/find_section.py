from ast import Call
from re import L
from urllib.request import urlretrieve
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

import time
import os
import urllib
import requests

from markups.add_section import *
from models.user import User
from models.city import City
from models.category import Category
from models.section import Section, SectionPhoto
from states.find_section import FindSection
from utils.db_connection import create_db_session

from markups.find_section import *


from email_validator import validate_email, EmailNotValidError


async def select_city(message: Message):
    await FindSection.City.set()
    kb = await get_cities_kb(offset=0)
    chat_id = message["from"]["id"]
    await message.bot.send_message(
        text="""
        –ì–æ—Ä–æ–¥üè¢
        ---
        –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑
        –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """,
        chat_id=chat_id,
        reply_markup=kb,
    )


async def save_city_value_and_select_category(call: CallbackQuery, state: FSMContext):
    chat_id = call["from"]["id"]
    async with state.proxy() as data:
        data["city"] = call.data.split("_")[1]

    await FindSection.Category.set()

    kb = await f_get_categories_kb(offset=0)
    await call.bot.send_message(
        text="""
        –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        ---
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å
        –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.
        –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
        –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–µ—Å—Ç–∞.üí™
    """,
        chat_id=chat_id,
        reply_markup=kb,
    )


async def metro_or_district(call: CallbackQuery, state: FSMContext):
    await FindSection.MetroOrDistrict.set()
    async with state.proxy() as data:
        data["category"] = call.data.split("_")[1]

    chat_id = call["from"]["id"]
    await call.bot.send_message(
        text="""
        –í—ã–±–æ—Ä –º–µ—Ç—Ä–æ –∏–ª–∏ —Ä–∞–π–æ–Ω–∞
        ---
        –ü–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É —Å—É–∑–∏—Ç—å
        –ø–æ–∏—Å–∫ –º–µ—Å—Ç.üó∫
    """,
        chat_id=chat_id,
        reply_markup=metro_or_district_kb,
    )


async def by_metro(call: CallbackQuery, state: FSMContext):
    await FindSection.Metro.set()
    async with state.proxy() as data:
        data["by_metro"] = True
        
        kb = await get_metros_kb(city=data["city"], offset=0)

    chat_id = call["from"]["id"]

    await call.bot.send_message(
        text="""
        –ú–µ—Ç—Ä–æ
        ---
        –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æüöá
    """,
        chat_id=chat_id,
        reply_markup=kb,
    )


async def by_district(call: CallbackQuery, state: FSMContext):
    await FindSection.District.set()
    async with state.proxy() as data:
        data["by_district"] = True
        kb = await get_districts_kb(city=data["city"], offset=0)

    chat_id = call["from"]["id"]

    await call.bot.send_message(
        text="""
        –†–∞–π–æ–Ω
        ---
        –£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ωüìç
    """,
        chat_id=chat_id,
        reply_markup=kb,
    )


async def select_training(call: CallbackQuery, state: FSMContext):
    await FindSection.Trainings.set()
    async with state.proxy() as data:
        data["metro_or_district"] = call.data.split("_")[1]

    kb = await get_trainigs_kb(offset=0)
    chat_id = call["from"]["id"]
    await call.bot.send_message(
        text="""
        –í–∏–¥ –∑–∞–Ω—è—Ç–∏–π
        ---
        –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ,
        –æ—Ç –π–æ–≥–∏ –∏ —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥–∞ –¥–æ –±–æ–∫—Å–∞
        –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.üèãÔ∏è‚Äç‚ôÇÔ∏è
        ---
        –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –±–æ—Ç—É
        –≤–∏–¥ –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å
        –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç‚§µÔ∏è
    """,
        chat_id=chat_id,
        reply_markup=kb,
    )


async def waiting_for_find(call: CallbackQuery, state: FSMContext):
    await FindSection.Wait.set()
    session_maker = await create_db_session()
    async with state.proxy() as data:
        data["traning"] = call.data

        category = await Category.get_category(
            session_maker=session_maker, name=data["category"]
        )
        category = category[0]
        if data.get("by_district"):
            district = await District.get_district(
                session_maker=session_maker, name=data["metro_or_district"]
            )
            district = district
            sections = await Section.find(
                session_maker=session_maker,
                city=data["city"],
                category_id=category.id,
                district_id=district[0].id,
            )
        else:
            metro = await Metro.get_metro(
                session_maker=session_maker, name=data["metro_or_district"]
            )
            sections = await Section.find(
                session_maker=session_maker,
                city=data["city"],
                category_id=category.id,
                metro_id=metro[0].id,
            )
        if sections == []:
            await call.bot.send_message(
                text="–ü–æ–¥—Ö–æ–¥—è—â–µ–π —Å–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å. ", chat_id=call['from']['id']
            )
        else:

            chat_id = call["from"]["id"]
            await call.bot.send_message(text="–ò—â–µ–º –¥–ª—è –≤–∞—Å –º–µ—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ‚è±", chat_id=chat_id)
            time.sleep(2)
            await call.bot.send_message(
                text="""
                –û—Ç–ª–∏—á–Ω–æ!üèãÔ∏è
                –ù–∞—à–ª–∏ –¥–ª—è —Ç–µ–±—è –º–µ—Å—Ç–∞,
                —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ‚öôÔ∏è
            """,
            chat_id=chat_id,
            )

            tranings = ""
            if type(sections[0].tranings) == list:
                for traning in sections[0].tranings:
                    tranings += traning + "\n"
            else:
                tranings = sections[0].tranings


            category = await Category.get_category(
                session_maker=session_maker, name=data["category"]
            )
            district = await District.get_district_by_id(
                session_maker=session_maker, id=sections[0].district_id
            )
            metro = await Metro.get_metro_by_id(
                session_maker=session_maker, id=sections[0].metro_id
            )

            data["section"] = sections[0]
            data['section_id'] = sections[0].id
            
            section_photo = await SectionPhoto.get_by_section_id(session_maker=session_maker, section_id=data['section'].id)
            
            if section_photo != []:
                photo = requests.get(section_photo[0].file_path)

                await call.bot.send_photo(
                photo=photo.content,
                caption=f"""
                    <b>{sections[0].title}</b>

                    –ì–æ—Ä–æ–¥:{sections[0].city}
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {sections[0].category_id}
                    –ê–¥—Ä–µ—Å: {sections[0].address}
                    –†–∞–π–æ–Ω: {district[0].name}
                    –ú–µ—Ç—Ä–æ: {metro[0].name}

                    –í–∏–¥—ã –∑–∞–Ω—è—Ç–∏–π:
                    {tranings}
                """,
                chat_id=chat_id,
                reply_markup=waiting_for_find_kb,
                )
            else:
                await call.bot.send_message(
                    text=f"""
                    <b>{sections[0].title}</b>

                    –ì–æ—Ä–æ–¥:{sections[0].city}
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {sections[0].category_id}
                    –ê–¥—Ä–µ—Å: {sections[0].address}
                    –†–∞–π–æ–Ω: {district[0].name}
                    –ú–µ—Ç—Ä–æ: {metro[0].name}

                    –í–∏–¥—ã –∑–∞–Ω—è—Ç–∏–π:
                    {tranings}
                """,
                chat_id=chat_id,
                reply_markup=waiting_for_find_kb,
                )


async def way(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        lat = data['section'].geoposition.split(' ')[0]
        long = data['section'].geoposition.split(" ")[1]

    await call.bot.send_message(text=f"""
        <a href='https://maps.yandex.ru/?ll={lat},{long}&z=12'>–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É
–ú–æ—Å–∫–≤—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã</a>
    """, chat_id=call['from']['id'])


async def consult(call: CallbackQuery, state: FSMContext):
    
    async with state.proxy() as data:
        await call.bot.send_message(
            text=f"""
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
            ---
            –ú–µ—Å—Ç–æ
            {data['section'].title}
            –ò–º—è
            {call['from']['first_name']}

            –¢–µ–ª–µ—Ñ–æ–Ω:

        """,
            chat_id=call["from"]["id"],
            reply_markup=consult_kb,
        )
    await call.bot.send_message(
        text = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        chat_id = call['from']['id']
    )
    
    await call.bot.send_message(
        text=f"""
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å –º–µ—Å—Ç–æ–º
    """,
        chat_id=call["from"]["id"],
    )
    time.sleep(1)
    await call.bot.send_message(
        text=f"""
        –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –≤ 
        —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è
        –º–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Å—Ç–∞ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ
        –≤–æ–ø—Ä–æ—Å—ã
        ---
        –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å
        –ø–æ–¥–±–æ—Ä–æ–º, –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏
        –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à –±–æ—Ç ‚ÇΩ(—Ä—É–±–ª–µ–º)
    """,
        chat_id=call["from"]["id"],
        reply_markup=consult_sent_kb,
    )


async def feedback(call: CallbackQuery, state: FSMContext):
    await call.bot.send_message(
        text="""
        –û—Ü–µ–Ω–∏—Ç–µ –º–µ—Å—Ç–æ‚≠êÔ∏è
        ---
        –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç–∞, –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
    """,
        chat_id=call["from"]["id"],
        reply_markup=feedback_kb,
    )


async def feedback_text(call: CallbackQuery, state: FSMContext):

    rate = call.data.split("_")[1]
    session_maker = await create_db_session()
    async with state.proxy() as data:
        section = data["section"]
        await section.update_section_rates(session_maker=session_maker, rate=int(rate))

    await call.bot.send_message(
        text="""
        –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤
        ---
        –í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ –º–µ—Å—Ç–æ?
        –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ—á–µ–º—É!
    """,
        chat_id=call["from"]["id"],
    )


async def not_help(call: CallbackQuery, state: FSMContext):
    await call.bot.send_message(
        text="""
        –û—Ç–ª–∏—á–Ω–æ
        –ú–µ—Å—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 
        –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É
        ---
        /listplace 
    """,
        chat_id=call["from"]["id"],
    )

    time.sleep(10)
    await call.bot.send_message(
        text="""
        –ü—Ä–∏–≤–µ—Ç!
        –≠—Ç–æ —Å–Ω–æ–≤–∞ –±–æ—Ç –ø–æ—Ä—Ç–∞–ª–∞
        MestoSporta
        ---
        –°–∫–∞–∂–∏—Ç–µ, —Å–≤—è–∑–∞–ª—Å—è –ª–∏ —Å –≤–∞–º–∏ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±?
    """,
        chat_id=call["from"]["id"],
        reply_markup=yes_or_not_kb,
    )


async def yes_bot(call: CallbackQuery, state: FSMContext):
    await call.bot.send_message(
        text="""
        –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –•–æ—Ä–æ—à–∏—Ö –≤–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """,
    chat_id=call['from']['id']
    )


async def no_bot(call: CallbackQuery, state: FSMContext):
    await call.bot.send_message(
        text="""
        –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ú—ã –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.
    """,
        chat_id=call["from"]["id"],
    )


def register_select_section(dp: Dispatcher):
    dp.register_callback_query_handler(select_city, text=["start_search"], state='*')
    dp.register_callback_query_handler(
        save_city_value_and_select_category,
        Text(startswith="city_"),
        state="*",
    )
    dp.register_callback_query_handler(
        metro_or_district, Text(startswith="findcategory_"), state=FindSection
    )
    dp.register_callback_query_handler(by_metro, text=["by_metro"], state='*')
    dp.register_callback_query_handler(
        by_district, text=["by_district"], state='*'
    )
    dp.register_callback_query_handler(
        select_training, Text(startswith="findmetro_"), state="*"
    )
    dp.register_callback_query_handler(
        select_training, Text(startswith="finddistrict_"), state='*'
    )
    dp.register_callback_query_handler(
        waiting_for_find, Text(startswith="findtraning_"), state='*'
    )

    dp.register_callback_query_handler(consult, text=["consult"], state='*')
    dp.register_callback_query_handler(feedback, text=["feedback"], state='*')
    dp.register_callback_query_handler(
        feedback_text, Text(startswith="rate_"), state='*'
    )

    dp.register_callback_query_handler(not_help, text=["not_help"], state='*')
    dp.register_callback_query_handler(yes_bot, text=["yes"], state='*')
    dp.register_callback_query_handler(no_bot, text=["no"], state='*')
    dp.register_callback_query_handler(way, text=['way'], state='*')

# def register_select_section(dp: Dispatcher):
#     dp.register_callback_query_handler(select_city, text=["start_search"])
#     dp.register_callback_query_handler(
#         save_city_value_and_select_category,
#         Text(startswith="city_"),
#         state=FindSection.City,
#     )
#     dp.register_callback_query_handler(
#         metro_or_district, Text(startswith="category_"), state=FindSection.Category
#     )
#     dp.register_callback_query_handler(by_metro, text=["by_metro"], state=FindSection)
#     dp.register_callback_query_handler(
#         by_district, text=["by_district"], state=FindSection
#     )
#     dp.register_callback_query_handler(
#         select_training, Text(startswith="metro_"), state=FindSection
#     )
#     dp.register_callback_query_handler(
#         select_training, Text(startswith="district_"), state=FindSection
#     )
#     dp.register_callback_query_handler(
#         waiting_for_find, Text(startswith="traning_"), state=FindSection
#     )

#     dp.register_callback_query_handler(consult, text=["consult"], state=FindSection)
#     dp.register_callback_query_handler(feedback, text=["feedback"], state=FindSection)
#     dp.register_callback_query_handler(
#         feedback_text, Text(startswith="rate_"), state=FindSection
#     )

#     dp.register_callback_query_handler(not_help, text=["not_help"], state=FindSection)
#     dp.register_callback_query_handler(yes_bot, text=["yes"], state=FindSection)
#     dp.register_callback_query_handler(no_bot, text=["no"], state=FindSection)
#     dp.register_callback_query_handler(way, text=['way'], state=FindSection)